@charset "UTF-8";

// A dot-syntax configuration (Map) library in Sass
// https://github.com/sass-projects/sass-config-manager
// Authors: Daniel Bannert (@anolilab)
// This project is licensed under the terms of the MIT license

// Setting to use global vars
$config-manager-variables: global !default !global;
$sass-config-delimiter:    "." !default !global;
$sass-config-attr:         () !default !global;
$sass-config-default:      () !default !global;
$sass-config-namespace:    "" !default !global;



// Return list-map from $list and ensure input list-map is
// list-of-lists
@function list-map-check($list)
{
    @if (length($list) == 2 and length(nth($list, 1)) == 1) {
        @return append((), $list, "comma");
    }

    @return $list;
}



// Extracts a slice of a list
@function list-slice($list, $start: 1, $end: length($list))
{
    $output: ();

    @if ($start >= 1 and $end >= $start) {
        @for $i from $start through $end {
            $output: append($output, nth($list, $i));
        }
    }

    @return $output;
}



// Sets a value to a Map by the map path
@function config-map-set($map, $path, $value)
{
    $map:    list-map-check($map);
    $keys:   str-split($path, $sass-config-delimiter);
    $length: length($keys);

    $result: (nth($keys, $length): $value);

    @if ($length > 1) {
        @for $i from 1 through $length - 1 {
            $path: "";
            $key:  nth($keys, 1);
            $j:    $length - $i;
            $key:  nth($keys, $j);
            $path: str-join(list-slice($keys, 1, $j), $sass-config-delimiter);

            @if (config-map-has($map, $path)) {
                $value: config-map-get($map, $path);

                @if (type-of($value) == "map") {
                    $result: config-map-merge(($key: $value), ($key: $result));
                } @else {
                    $result: ($key: $result);
                }
            } @else {
                $result: ($key: $result);
            }
        }
    }

    $map: config-map-merge($map, $result);

    @return $map;
}



// Gets a value from a Map by the map path
@function config-map-get($map, $path)
{
    $keys:  str-split($path, $sass-config-delimiter);
    $value: list-map-check($map);

    @each $key in $keys {
        @if (type-of($value) != "map" or not map-has-key($value, $key)) {
            @warn "The path '#{$path}' doesn\"t exist.";

            @return null;
        }

        $value: map-get($value, $key);
    }

    @return $value;
}



// Returns whether the key of a map path exists in a Map
@function config-map-has($map, $key)
{
    $keys:  str-split($key, $sass-config-delimiter);
    $value: list-map-check($map);

    @each $key in $keys {
        @if (type-of($value) != "map" or not map-has-key($value, $key)) {
            @return false;
        }

        $value: map-get($value, $key);
    }

    @return true;
}



// Recursively merges one or more maps
@function config-map-merge($maps...)
{
    $result: nth($maps, 1);

    @for $i from 1 through length($maps) - 1 {
        @each $key, $value in nth($maps, $i + 1) {
            @if (type-of($result) != "map") {
                $result: ($key: $value);
            }

            @if (type-of($value) == "map") {
                $value: config-map-merge(map-get($result, $key), $value);
            }

            @if ($key != null) {
                $result: map-merge($result, ($key: $value));
            }
        }
    }

    @return $result;
}



// Joins list elements with a string
@function str-join($list, $glue: "")
{
    $result: "";

    @if (length($list) == 0) {
        @return $result;
    }

    @if (length($list) > 1) {
        @for $i from 1 through length($list) - 1 {
            $result: $result + nth($list, $i) + $glue;
        }
    }

    $result: $result + nth($list, length($list));

    @return $result;
}



// Splits a string by a delimiter
@function str-split($string, $delimiter: "")
{
    $result: ();
    $length: str-length($string);

    @if (str-length($delimiter) == 0) {
        @for $i from 1 through $length {
            $result: append($result, str-slice($string, $i, $i));
        }

        @return $result;
    }

    $break: false;

    @while (not $break) {
        $index: str-index($string, $delimiter);

        @if (not $index or $index == 0) {
            $break: true;
        } @else {
            $part:   if($index != 1, str-slice($string, 1, $index - 1), "");
            $result: append($result, $part);
            $string: str-slice($string, $index + str-length($delimiter));
        }
    }

    @return append($result, $string);
}



// Gets a value to/from a configuration path
@function config-get($key, $default: false)
{
    @if ($default) {
        @if (config-map-has($sass-config-default, $key)) {
            @return config-map-get($sass-config-default, $key);
        }
    } @else {
        @if (config-map-has($sass-config-attr, $key)) {
            @return config-map-get($sass-config-attr, $key);
        } @else if (config-map-has($sass-config-default, $key)) {
            @return config-map-get($sass-config-default, $key);
        }
    }

    @warn "The key '#{$key}' doesn\"t exist.";

    @return null;
}



// Returns whether a configuration path exists
@function config-has($key)
{
    $key: $sass-config-namespace + $key;

    @if (config-map-has($sass-config-attr, $key) or config-map-has($sass-config-default, $key)) {
        @return true;
    }

    @return false;
}



// Remove settings
@function config-reset($settings, $default: false)
{
    $settings: $sass-config-namespace + $settings;

    @if (length($settings) == 1) {
        $settings: nth($settings, 1);
    }

    @each $setting in $settings {
        @if ($default) {
            @if ($config-manager-variables == "global") {
                $sass-config-default: map-remove($sass-config-default, $setting) !global;
            } @else {
                $sass-config-default: map-remove($sass-config-default, $setting);
            }
        } @else {
            @if ($config-manager-variables == "global") {
                $sass-config-attr: map-remove($sass-config-attr, $setting) !global;
            } @else {
                $sass-config-attr: map-remove($sass-config-attr, $setting);
            }
        }
    }

    @return true;
}



// Sets a value to/from a configuration path
@function config-set($key, $value, $default: false)
{
    $key: $sass-config-namespace + $key;

    @if ($default) {
        @if (config-map-has($sass-config-default, $key)) {
            $value: config-map-get($sass-config-default, $key);
        } @else {
            @if ($config-manager-variables == "global") {
                $sass-config-default: config-map-set($sass-config-default, $key, $value) !global;
            } @else {
                $sass-config-default: config-map-set($sass-config-default, $key, $value);
            }
        }
    } @else {
        @if ($config-manager-variables == "global") {
            $sass-config-attr: config-map-set($sass-config-attr, $key, $value) !global;
        } @else {
            $sass-config-attr: config-map-set($sass-config-attr, $key, $value);
        }
    }

    @return $value;
}



// Sets a value to a configuration path
@mixin config-set($key, $value, $default: false)
{
    $config: config-set($key, $value, $default);
}



// Gets a value to/from a configuration path
@mixin config-get($key, $default: false)
{
    $config: config-get($key, $default);
}



// Remove settings
@mixin config-reset($settings, $default: false)
{
    $config-reset: config-reset($settings);
}
